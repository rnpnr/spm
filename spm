#!/bin/sh
# Copyright (C) 2013-2016 SÃ¶ren Tempel
# Copyright (C) 2016, 2017 Klemens Nanni <kl3@posteo.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

set -u
umask u=rwx,go=

## Variables
GPG_OPTS='--quiet --yes --batch'
STORE_DIR="${PASSWORD_STORE_DIR:-${HOME}/.spm}"

## Helper
die() {
	echo "$@" >&2
	exit 1
}

check() {
	[ -n "${entry}" ] || die "spm: no such entry"

	[ $(printf '%s' "${entry}" | wc -l) -eq 0 ] ||
		die "spm: ambigious expression"
}

gpg() {
	if [ -z "${PASSWORD_STORE_KEY}" ]; then
		gpg2 ${GPG_OPTS} --default-recipient-self "${@}"
	else
		gpg2 ${GPG_OPTS} --recipient "${PASSWORD_STORE_KEY}" "${@}"
	fi
}

readpw() {
	[ -t 0 ] && stty -echo && printf '%s' "${1}"
	IFS= read -r "${2}"
	[ -t 0 ] && stty echo
	[ -z "${2}" ] && die "spm: empty password"
}

find() {
	command find "${STORE_DIR}" -name "*.gpg" -type f -o -type l | grep -ie "${1}"
}

## Commands
add() {
	[ -e "${STORE_DIR}"/"${1}" ] && die "spm: entry already exists"

	password=
	readpw "Password for '${1}': " password
	[ -t 0 ] && printf '\n'

	group="${1%/*}"
	[ "${group}" = "${1}" ] && group=

	mkdir -p "${STORE_DIR}"/"${group}" &&
		printf '%s\n' "${password}" |
			gpg --encrypt --output "${STORE_DIR}"/"${1}.gpg"
}

list() {
	[ -d "${STORE_DIR}"/"${1:-}" ] || die "spm list: no such group"
	find "${STORE_DIR}"/"${1:-}"
}

del() {
	entry=$(find "${1}" | head -n2)
	check; command rm "${entry}" && printf '\n'
}

search() {
	find "${1}"
}

show() {
	entry=$(find "${1}" | head -n2)
	check; gpg --decrypt "${entry}"
}

## Parse input
[ $# -gt 2 ] && die "spm: wrong number of arguments"

case "${1}" in
add|del|search|show)
	[ -z "${2:-}" ] && die "spm: empty name"
	${1} "${2}"
	;;
list)
	list "${2:-.}"
	;;
*)
	die "usage: ${0} add|del|list|search|show [[group/]entry|expression]"
	;;
esac
